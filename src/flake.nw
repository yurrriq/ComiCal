\section{Nix flake}
\label{sec:flake}

Nix \hrefootnote{https://nixos.wiki/wiki/Flakes}{flakes} are an excellent
addition to the Nix ecosystem.\todor{Describe flakes a bit, preferably using a
  glossary} This one is comprised of a \nix{description},
\hyperref[subsec:flake-inputs]{\nix{inputs}}, and
\hyperref[subsec:flake-outputs]{\nix{outputs}}.

<<flake.nix>>=
{
  description = "Track the publish dates of your favorite comics";

  inputs = {
    <<inputs>>
  };

  outputs = inputs@{ self, emacs-overlay, flake-utils, nixpkgs, ... }:
    inputs.flake-parts.lib.mkFlake { inherit inputs; } {
      imports = [
        <<import pre-commit-hooks-nix>>
      ];

      flake = {
        <<Top-level outputs>>
      };

      systems = [
        "x86_64-linux"
      ];

      perSystem = { config, lib, pkgs, self', system, ... }: {
        _module.args.pkgs = import nixpkgs {
          overlays = [ self.overlays.default ];
          inherit system;
        };

        <<apps>>

        <<devShells>>

        <<packages>>

        <<Configure pre-commit hooks>>
      };
    };
}
@


\subsection{Inputs}
\label{subsec:flake-inputs}

The \hrefootnote{https://github.com/nix-community/emacs-overlay}{Emacs overlay}
\say{comes with extra functions to generate an Emacs closure from various types
  of dependency declaration,} notably, \nix{emacsWithPackagesFromUsePackage},
which generates an Emacs closure from an Emacs config file, by way of
\hrefootnote{https://jwiegley.github.io/use-package/}{\elisp{use-package}}.  See
\hyperref[sec:emacs]{the Emacs section} on page~\pageref{sec:emacs} for usage.

<<inputs>>=
emacs-overlay = {
  inputs = {
    flake-utils.follows = "flake-utils";
    nixpkgs.follows = "nixpkgs";
  };
  url = "github:nix-community/emacs-overlay";
};
@

\todoo{Describe flake-parts}

<<inputs>>=
flake-parts.url = "github:hercules-ci/flake-parts";
@

\hrefootnote{https://github.com/numtide/flake-utils}{\nix{flake-utils}}
provides \say{a collection of pure Nix functions \ldots\ that are
  useful in the context of writing other Nix flakes.} One of the most
useful of these functions is \nix{eachDefaultSystem}, which
\say{build[s] the same structure for each system [supported by nixpkgs
    and built by hydra]}. Due to some
\hrefootnote{https://github.com/NixOS/nix/pull/5253}{IFD}\todor{Add
  a glossary} issues, use \nix{eachSystem} for now instead.

<<inputs>>=
flake-utils.url = "github:numtide/flake-utils";
@

Pin \hrefootnote{https://github.com/NixOS/nixpkgs}{the Nix package collection}
to the latest unstable version that's been built on Hydra.

<<inputs>>=
nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
@

\todoo{Describe pre-commit-hooks.nix}

<<inputs>>=
pre-commit-hooks-nix = {
  inputs = {
    flake-utils.follows = "flake-utils";
    nixpkgs.follows = "nixpkgs";
  };
  url = "github:cachix/pre-commit-hooks.nix";
};
@

<<import pre-commit-hooks-nix>>=
inputs.pre-commit-hooks-nix.flakeModule
@

<<inherit from the pre-commit devShell>>=
config.pre-commit.devShell
@

<<Define a pre-commit hook to ensure literate sources are tangled>>=
make-srcs = {
  always_run = true;
  description = "Ensure literate sources are tangled";
  enable = true;
  entry =
    let
      make-srcs = pkgs.writeShellApplication {
        name = "make-srcs";
        runtimeInputs = with pkgs; [
          coreutils
          gnumake
          noweb
          perl
        ];
        text = "make srcs";
      };
    in
    "${make-srcs}/bin/make-srcs";
};
@

<<Configure pre-commit hooks>>=
pre-commit.settings = {
  hooks = {
    deadnix.enable = true;
    hlint.enable = true;
    <<Define a pre-commit hook to ensure literate sources are tangled>>
    nixpkgs-fmt.enable = true;
    ormolu.enable = true;
    # TODO: create PR to add noCabal
    ormolu.entry =
      let
        inherit (config.pre-commit.settings) settings;
        extensions =
          lib.escapeShellArgs (lib.concatMap (ext: [ "--ghc-opt" "-X${ext}" ]) settings.ormolu.defaultExtensions);
        noCabal = "--no-cabal";
      in
      lib.mkForce "${pkgs.ormolu}/bin/ormolu --mode inplace ${extensions} ${noCabal}";
  };
  settings = {
    deadnix.noLambdaArg = true;
    ormolu.defaultExtensions = [
      "OverloadedStrings"
      "TemplateHaskell"
    ];
  };
};
@

\subsection{Outputs}
\label{subsec:flake-outputs}

Use
\hrefootnote{https://github.com/NixOS/nixpkgs/commit/c3b35f21}{\nix{composeManyExtensions}}
to compose all the [[<<overlays>>]] into one.

<<Top-level outputs>>=
overlays = {
  default =
    nixpkgs.lib.composeManyExtensions
      (nixpkgs.lib.attrValues
        (nixpkgs.lib.filterAttrs
          (n: _: n != "default")
          self.overlays));

  <<myEmacs overlay>>
};
@

Build \hrefootnote{https://www.gnu.org/software/emacs/}{Emacs} with a
deterministic package set.  See page~\pageref{sec:emacs} for the \nix{config}.

<<myEmacs overlay>>=
myEmacs = nixpkgs.lib.composeExtensions emacs-overlay.overlay (final: prev: {
  myEmacs = prev.emacsWithPackagesFromUsePackage {
    alwaysEnsure = true;
    config = ./emacs.el;
  };
});
@ %def myEmacs

Define the ComiCal app and package, and make them the defaults.

<<apps>>=
apps = {
  ComiCal = flake-utils.lib.mkApp {
    drv = pkgs.haskell.lib.justStaticExecutables self'.packages.ComiCal;
  };
  default = self'.apps.ComiCal;
};
@

[[<<Build ComiCal using cabal2nix>>]]%
\footnote{\url{https://github.com/NixOS/cabal2nix}}.

<<Build ComiCal using cabal2nix>>=
pkgs.haskellPackages.callCabal2nix "ComiCal" self { };
@
\marginnote{%
  \nix{self} here refers to this flake.
}

<<packages>>=
packages = {
  ComiCal = <<Build ComiCal using cabal2nix>>
  default = self'.packages.ComiCal;
};
@

Define the default \nix{devShell}, which includes all the [[<<tools>>]]
necessary to build the binary, Haskell documentation, and this PDF.

<<devShells>>=
devShells.default = pkgs.mkShell {
  <<fontconfig>>

  inputsFrom = [
    # TODO: make this its own chunk and describe it
    self'.packages.ComiCal.env
    <<inherit from the pre-commit devShell>>
  ];

  nativeBuildInputs = with pkgs; [
    <<tools>>
  ];
};
@

Include \hrefootnote{https://www.haskell.org/cabal/}{Cabal} for quick iteration
outside of Nix, and
\hrefootnote{https://github.com/bmillwood/pointfree}{pointfree} because I can't
help myself.

<<tools>>=
cabal-install
haskellPackages.pointfree
@

Include the hermetic build of Emacs (from the [[<<myEmacs overlay>>]]) and the
dependencies for
\hrefootnote{https://github.com/emacs-lsp/lsp-mode/}{\elisp{lsp-mode}},
i.e. \hrefootnote{https://github.com/ndmitchell/ghcid}{ghcid},
\hrefootnote{https://github.com/haskell/haskell-language-server}{haskell-language-server},
and \hrefootnote{https://github.com/nix-community/rnix-lsp}{rnix-lsp}.

<<tools>>=
myEmacs
ghcid
haskell-language-server
rnix-lsp
@

Include the literate programming toolchain,
i.e. \hrefootnote{https://github.com/nrnrnr/noweb/}{noweb},
\hrefootnote{https://pygments.org/}{Pygments} (for
\hrefootnote{https://github.com/gpoore/minted}{\txt{minted}}), and a
\hrefootnote{http://xetex.sourceforge.net/}{\XeTeX} environment with all the
necessary packages via
\hrefootnote{https://nixos.org/manual/nixpkgs/stable/\#sec-language-texlive}{\nix{texlive.combine}}.

<<tools>>=
noweb
python3Packages.pygments
(
  texlive.combine {
    inherit (texlive) scheme-small;
    inherit noweb;
    # tufte-latex and deps
    inherit (texlive)
      catchfile
      fmtcount
      framed
      fvextra
      hardwrap
      mathpazo
      titlesec
      tufte-latex
      xstring
      ;
    # my preferred packages
    inherit (texlive)
      datetime
      dirtytalk
      fancyref
      latexmk
      minted
      todonotes
      xetex
      ;
  }
)
@

\todoo{Describe these tools}

<<tools>>=
python3Packages.pywatchman
semver-tool
@

For finding Noweb sources in the Makefile.

<<tools>>=
coreutils
perl
@

Last, but not least, configure my preferred font,
\hrefootnote{http://be5invis.github.io/Iosevka}{Iosevka}.

<<fontconfig>>=
FONTCONFIG_FILE = pkgs.makeFontsConf {
  fontDirectories = [ pkgs.iosevka ];
};
@

%% Local Variables:
%% noweb-code-mode: nix-mode
%% End:
