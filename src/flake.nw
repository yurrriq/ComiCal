\section{Flake}

<<flake.nix>>=
{
  description = "Track the publish dates of your favorite comics";

  inputs = {
    <<inputs>>
  };

  outputs = { self, emacs-overlay, flake-utils, nixpkgs }:
    {
      <<Top-level outputs>>
    } // flake-utils.lib.eachSystem [ "x86_64-linux" ] (system:
      let
        pkgs = import nixpkgs {
          overlays = [ self.overlay ];
          inherit system;
        };
      in
      {
        <<Per-system outputs>>
      });
}
@

<<inputs>>=
emacs-overlay.url = "github:nix-community/emacs-overlay";
flake-utils.url = "github:numtide/flake-utils";
nixpkgs.url = "github:nixos/nixpkgs";
@

<<Top-level outputs>>=
overlay = nixpkgs.lib.composeManyExtensions (nixpkgs.lib.attrValues self.overlays);

overlays = {
  <<Overlays>>
};
@

<<Overlays>>=
haskellPackages = final: prev: {
  haskellPackages = prev.haskellPackages.override {
    overrides = hfinal: hprev: {
      ComiCal = hprev.callCabal2nix "ComiCal" self { };
    };
  };
};
@

<<Overlays>>=
myEmacs = nixpkgs.lib.composeExtensions emacs-overlay.overlay (final: prev: {
  myEmacs = prev.emacsWithPackagesFromUsePackage {
    alwaysEnsure = true;
    config = ./emacs.el;
  };
});
@

<<Per-system outputs>>=
apps.ComiCal = flake-utils.lib.mkApp {
  drv = pkgs.haskell.lib.justStaticExecutables self.defaultPackage.${system};
};
@

<<Per-system outputs>>=
defaultApp = self.apps.${system}.ComiCal;
@

<<Per-system outputs>>=
defaultPackage = self.packages.${system}.ComiCal;
@

<<Per-system outputs>>=
devShell = pkgs.mkShell {
  FONTCONFIG_FILE = pkgs.makeFontsConf {
    fontDirectories = [ pkgs.iosevka ];
  };

  buildInputs = with pkgs; [
    cabal-install
    cargo # NOTE: needed for nixpkgs-fmt pre-commit hook
    ghcid
    gitAndTools.pre-commit
    haskell-language-server
    haskellPackages.ormolu
    haskellPackages.pointfree
    hlint
    myEmacs
    nixpkgs-fmt
    noweb
    python3Packages.yamllint
    (
      texlive.combine {
        inherit noweb;
        inherit (texlive) scheme-small
          catchfile
          datetime
          fancyref
          fmtcount
          hardwrap
          latexmk
          mathpazo
          titlesec
          tufte-latex
          xetex
          ;
      }
    )
    which
  ] ++ self.defaultPackage.${system}.env.nativeBuildInputs;
};
@

<<Per-system outputs>>=
packages = { inherit (pkgs.haskellPackages) ComiCal; };
@

%% Local Variables:
%% noweb-code-mode: nix-mode
%% End:
