\section{Haskell}

\subsection{The ComiCal.Types module}

Define a record type [[Event]] to hold a timetstamp UID, summary, and \hs{URI}.

<<Define the Event and Calendar types>>=
-- | A calendar 'Event' represents a 'Release' date.
data Event = Event
  { _eventDtstamp :: Day,
    _eventUid :: Text,
    _eventSummary :: Text,
    _eventUri :: URI
  }
  deriving (Eq)

@ %def Event

Build read-only \hrefootnote{https://hackage.haskell.org/package/lens}{lenses},
i.e. \hs{Fold}s and \hs{Getters}, for [[Event]]s.

<<Define the Event and Calendar types>>=
makeLensesWith (defaultFieldRules & generateUpdateableOptics .~ False) ''Event

@ %def dtstamp
@ %def uid
@ %def summary
@ %def uri

Define the \hs{Show} instance for [[Event]].  This loosely adheres to
\hrefootnote{https://datatracker.ietf.org/doc/html/rfc5545\#section-3.6.1}{RFC
  5545 Section 3.6.1}.

<<Define the Event and Calendar types>>=
instance Show Event where
  show event =
    intercalate
      "\r\n"
      [ "BEGIN:VEVENT",
        printf "UID:%s" (event ^. uid),
        printf "DTSTAMP:%s" (formatTime defaultTimeLocale "%Y%m%dT%H%M%S" time),
        printf "SUMMARY:%s" (event ^. summary),
        printf "DTSTART;VALUE=DATE:%s" $ formatDay time,
        printf "DTEND;VALUE=DATE:%s" $ formatDay (addUTCTime nominalDay time),
        printf "URL:%s" (URI.render (event ^. uri)),
        "END:VEVENT"
      ]
    where
      formatDay :: UTCTime -> String
      formatDay = formatTime defaultTimeLocale "%Y%m%d"
      time = UTCTime (event ^. dtstamp) (secondsToDiffTime 0)

@

Define a record type [[Calendar]] to hold a name and a \hs{NonEmpty} list of
[[Event]]s.

<<Define the Event and Calendar types>>=
-- | A 'Calendar' is a nonempty collection of 'Event's.
data Calendar = Calendar
  { _calendarName :: Text,
    _calendarEvents :: NE.NonEmpty Event
  }
  deriving (Eq)

@ %def Calendar

Generate overloaded field accessors for [[Calendar]].

<<Define the Event and Calendar types>>=
makeFields ''Calendar

@ %def name
@ %def events

Define a \hs{Semigroup} instance for [[Calendar]] where the binary operation
concatenates [[name]]s (comma-separated) as well as [[events]].

<<Define the Event and Calendar types>>=
instance Semigroup Calendar where
  a <> b =
    name <>~ ", " <> b ^. name $
      events <>~ b ^. events $
        a

@

Define the \hs{Show} instance [[Calendar]].  This very loosely adheres to
\hrefootnote{https://datatracker.ietf.org/doc/html/rfc5545\#section-3}{RFC 5455
  Section 3}.

<<Define the Event and Calendar types>>=
instance Show Calendar where
  show cal =
    intercalate "\r\n" $
      [ "BEGIN:VCALENDAR",
        "PRODID:-//Mozilla.org/NONSGML Mozilla Calendar V1.1//EN",
        "VERSION:2.0",
        printf "X-WR-CALNAME:%s" (cal ^. name)
      ]
        <> NE.toList (show <$> cal ^. events)
        <> ["END:VCALENDAR"]
@

Define a record type [[Release]] to hold a slug, title, maybe a number, a
\hs{URI}, and date.

<<Define the Release and Series types>>=
-- | A 'Release' represents a single issue or a trade paperback.
data Release = Release
  { _releaseSlug :: Text,
    _releaseTitle :: Text,
    _releaseNumber :: Maybe Int,
    _releaseUri :: URI,
    _releaseDate :: Day
  }
  deriving (Eq)

@ %def Release
@ %def slug
@ %def title
@ %def number
@ %def uri
@ %def date

Build \hs{Fold}s and \hs{Getters}, for [[Event]]s

<<Define the Release and Series types>>=
makeLensesWith (defaultFieldRules & generateUpdateableOptics .~ False) ''Release

@

Define the \hs{Show} instance for [[Release]], which prints the [[title]] and
[[date]].

<<Define the Release and Series types>>=
instance Show Release where
  show release = printf "%s on %s" (T.unpack (release ^. title)) (show (release ^. date))

@

Define a record type [[Series]] to hold a title, slug, \hs{URI}, and a
\hs{NonEmpty} list of [[Release]]s.

<<Define the Release and Series types>>=
-- | A 'Series' is a collection of 'Release's.
data Series = Series
  { _seriesTitle :: Text,
    _seriesSlug :: Text,
    _seriesUri :: URI,
    _seriesReleases :: NE.NonEmpty Release
  }
  deriving (Eq)

@ %def Series
@ %def releases

<<Define the Release and Series types>>=
makeLensesWith (defaultFieldRules & generateUpdateableOptics .~ False) ''Series

@

Define the \hs{Show} instance for [[Series]], which prints the [[title]] and
number of [[releases]].

<<Define the Release and Series types>>=
instance Show Series where
  show series =
    printf
      "%s (%d releases)"
      (series ^. title)
      (length (series ^. releases))
@

\todoo{Describe Scraper}

<<Define the Scraper type>>=
data Scraper = Scraper
  { partitionReleases :: Cursor -> [Cursor],
    parseTitle :: Cursor -> Text,
    parseReleaseTitle :: Cursor -> Text,
    parseReleaseDate :: Cursor -> Maybe Day
  }
@ %def partitionReleases

A [[PullList]] consists of various possibly empty lists of slugs.

<<Define the PullList type>>=
data PullList = PullList
  { dcCollections :: [Text],
    dcIssues :: [Text],
    imageCollections :: [Text],
    imageIssues :: [Text],
    marvelCollections :: [Text],
    marvelIssues :: [Text]
  }
  deriving (Show, Generic)

@ %def PullList

A [[PullList]] can be deserialized from JSON.

<<Define the PullList type>>=
instance FromJSON PullList where
  parseJSON (Object v) =
    PullList
      <$> maybeSlugs "dcCollections"
      <*> maybeSlugs "dcIssues"
      <*> maybeSlugs "imageCollections"
      <*> maybeSlugs "imageIssues"
      <*> maybeSlugs "marvelCollections"
      <*> maybeSlugs "marvelIssues"
    where
      maybeSlugs key = T.pack <$$> v .: key <|> pure []
  parseJSON invalid =
    prependFailure
      "parsing ComiCalConfig failed, "
      (typeMismatch "Object" invalid)
@

<<lib/ComiCal/Types.hs>>=
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FunctionalDependencies #-}

@

<<lib/ComiCal/Types.hs>>=
-- |
-- Module      : ComiCal.Types
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
@

<<lib/ComiCal/Types.hs>>=
module ComiCal.Types
  ( Release (Release),
    number,
    Series (Series),
    title,
    releases,
    Event (Event),
    dtstamp,
    uid,
    summary,
    Calendar (Calendar),
    name,
    events,
    HasDate,
    date,
    HasSlug,
    slug,
    HasUri,
    uri,
    Scraper (..),
    PullList (..),
  )
where

@

<<lib/ComiCal/Types.hs>>=
import Control.Applicative ((<|>))
import Control.Lens
  ( defaultFieldRules,
    generateUpdateableOptics,
    makeFields,
    makeLensesWith,
    (&),
    (.~),
    (<>~),
    (^.),
  )
import Data.Aeson.Types hiding (Series)
import Data.Functor.Syntax ((<$$>))
import Data.List (intercalate)
import qualified Data.List.NonEmpty as NE
import Data.Text (Text)
import qualified Data.Text as T
import Data.Time.Compat
  ( Day,
    UTCTime (UTCTime),
    addUTCTime,
    defaultTimeLocale,
    formatTime,
    nominalDay,
    secondsToDiffTime,
  )
import GHC.Generics
import Text.Printf (printf)
import Text.URI (URI)
import qualified Text.URI as URI
import Text.XML.Cursor

@

<<lib/ComiCal/Types.hs>>=
<<Define the Release and Series types>>

<<Define the Event and Calendar types>>

<<Define the Scraper type>>

<<Define the PullList type>>
@

\subsection{The ComiCal.App module}

Define one of the fundamental data types to model a comic publisher. Each
publisher is a record composed of a \hs{scraper :: Scraper} for extracting data
from their website, and functions to fetch the publish dates of collections and
single issues.

<<The Publisher data type>>=
data Publisher = Publisher
  { getCollections :: ComiCalApp Series,
    getIssues :: ComiCalApp Series,
    scraper :: Scraper
  }
@ %def Publisher
@ %def getCollections
@ %def getIssues
@ %def scraper

<<The ComiCalApp newtype>>=
newtype ComiCalApp a = ComiCalApp
  {runApp :: ReaderT (Text, Publisher) (LoggingT IO) a}
  deriving
    ( Functor,
      Applicative,
      Monad,
      MonadLogger,
      MonadIO,
      MonadReader (Text, Publisher),
      MonadFail,
      MonadThrow
    )
@ %def ComiCalApp

<<Running the app>>=
runComiCalApp :: (Publisher -> ComiCalApp a) -> Publisher -> Text -> IO a
runComiCalApp getter publisher =
  runStderrLoggingT
    . runReaderT (runApp (getter publisher))
    . (,publisher)
@ %def runComiCalApp

<<lib/ComiCal/App.hs>>=
{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE TupleSections #-}

-- |
-- Module      : ComiCal.App
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
module ComiCal.App
  ( ComiCalApp,
    runComiCalApp,
    Publisher (..),
  )
where

import ComiCal.Types (Scraper, Series)
import Control.Monad.Catch (MonadThrow)
import Control.Monad.Logger (LoggingT, MonadLogger, runStderrLoggingT)
import Control.Monad.Reader (MonadIO, MonadReader, ReaderT (..))
import Data.Text (Text)

<<The ComiCalApp newtype>>

<<Running the app>>

<<The Publisher data type>>
@

\subsection{The ComiCal module}

\todoo{Describe this module}

<<lib/ComiCal.hs>>=
-- |
-- Module      : ComiCal
-- Description : The main API for ComiCal
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : stable
-- Portability : POSIX
module ComiCal
  ( dcIssues,
    imageCollections,
    imageIssues,
    marvelIssues,
    mkCalendar,
  )
where

<<ComiCal imports>>

<<Handle DC comics>>

<<Handle Image comics>>

<<Handle Marvel comics>>

@

<<lib/ComiCal.hs>>=
-- | Given a 'Series', create an 'Event' from each 'Release' and return a
-- 'Calendar'.
mkCalendar :: Series -> Calendar
mkCalendar series = Calendar (series ^. title) $ NE.map go (series ^. releases)
  where
    go :: Release -> Event
    go rel =
      Event (rel ^. date) (rel ^. slug) (rel ^. title) $
        fromMaybe (rel ^. uri) ((rel ^. uri) `relativeTo` (series ^. uri))
@ %def mkCalendar

<<ComiCal imports>>=
import ComiCal.App (Publisher (..), runComiCalApp)
import qualified ComiCal.DC as DC
import qualified ComiCal.Image as Image
import qualified ComiCal.Marvel as Marvel
import ComiCal.Types hiding (PullList (..))
import Control.Lens ((^.))
import qualified Data.List.NonEmpty as NE
import Data.Maybe (fromMaybe)
import Data.Text (Text)
import Text.URI (relativeTo)
@

<<Handle DC comics>>=
-- | Given a [DC Comics series](https://www.dccomics.com/comics) slug,
-- fetch, parse, and return the issues of the 'Series'.
dcIssues :: Text -> IO Series
dcIssues = runComiCalApp getIssues DC.publisher
@ %def dcIssues

<<Handle Image comics>>=
-- | Given an [Image Comics series](https://imagecomics.com/comics/series) slug,
-- fetch, parse, and return the collections of the 'Series'.
imageCollections :: Text -> IO Series
imageCollections = runComiCalApp getCollections Image.publisher

-- | Given an [Image Comics series](https://imagecomics.com/comics/series) slug,
-- fetch, parse, and return the issues of the 'Series'.
imageIssues :: Text -> IO Series
imageIssues = runComiCalApp getIssues Image.publisher
@ %def imageCollections
@ %def imageIssues

<<Handle Marvel comics>>=
-- | Given a [Marvel Comics series](https://www.marvel.com/comics) slug,
-- fetch, parse, and return the issues of the 'Series'.
marvelIssues :: Text -> IO Series
marvelIssues = runComiCalApp getIssues Marvel.publisher
@ %def marvelIssues

\subsection{Handle DC comics}

<<Define the single issues parser for DC comics>>=
getIssues =
  do
    (seriesSlug, cfg) <- asks (second scraper)
    issuesURI <-
      mkURI $ "https://www.dccomics.com/comics/" <> urlEncode seriesSlug
    tags <- getHttps issuesURI
    Series (parseTitle cfg tags) seriesSlug issuesURI <$> parseReleases tags
@

<<Define the scraper for DC comics>>=
scraper =
  Scraper
    { partitionReleases = \cursor ->
        filter (not . null . ($// element "div")) $
          cursor
            $// element "tbody"
            &// element "td",
      parseTitle = \cursor ->
        T.strip . head $
          cursor
            $// (element "meta" >=> attributeIs "property" "og:title")
            &| head
            . attribute "content",
      parseReleaseTitle = \cursor ->
        T.strip . head $
          cursor
            $// element "div"
            >=> attributeIs "class" "views-field views-field-title"
            &// element "span"
            &// content,
      parseReleaseDate = \cursor ->
        fmap (localDay . zonedTimeToLocalTime) . iso8601ParseM . T.unpack . head $
          cursor
            $// element "span"
            >=> attributeIs "class" "date-display-single"
            >=> attribute "content"
    }
@

<<Define the Publisher for DC comics>>=
publisher :: Publisher
publisher =
  Publisher
    { <<Define the scraper for DC comics>>,
      getCollections = fail "Not yet implemented",
      <<Define the single issues parser for DC comics>>
    }
@ %def DC.publisher

<<lib/ComiCal/DC.hs>>=
-- |
-- Module      : ComiCal.DC
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
module ComiCal.DC (publisher) where

import ComiCal.App (Publisher (..))
import ComiCal.Types (Scraper (..), Series (..))
import ComiCal.Util (getHttps, parseReleases, urlEncode)
import Control.Arrow (second)
import Control.Monad.Reader (asks)
import qualified Data.Text as T
import Data.Time.Compat (localDay, zonedTimeToLocalTime)
import Data.Time.Format.ISO8601.Compat (iso8601ParseM)
import Text.URI (mkURI)
import Text.XML.Cursor

<<Define the Publisher for DC comics>>
@

\subsection{Handle Image comics}

<<Define the scraper for Image comics>>=
scraper =
  Scraper
    { partitionReleases = \cursor ->
        cursor $// element "div" >=> attributeIs "class" "cell u-mb1",
      parseTitle = \cursor ->
        T.strip . last . T.splitOn " | " . head $
          cursor
            $// (element "meta" >=> attributeIs "property" "og:title")
            &| head
            . attribute "content",
      parseReleaseTitle = \cursor ->
        T.strip . head $
          cursor
            $// element "a"
            &// element "span"
            &/ content,
      parseReleaseDate = \cursor ->
        parseTimeM True defaultTimeLocale "%b %e, %Y" . T.unpack . head $
          cursor
            $// element "span"
            >=> attributeIs "class" "date"
            &/ content
    }
@

<<Define the collections parser for Image comics>>=
getCollections =
  do
    (seriesSlug, cfg) <- asks (second scraper)
    collectionsURI <-
      mkURI $
        "https://imagecomics.com/comics/list/series/"
          <> urlEncode seriesSlug
          <> "/collected-editions"
    tags <- getHttps collectionsURI
    Series (parseTitle cfg tags) seriesSlug collectionsURI <$> parseReleases tags
@

<<Define the single issues parser for Image comics>>=
getIssues =
  do
    (seriesSlug, cfg) <- asks (second scraper)
    issuesURI <-
      mkURI $
        "https://imagecomics.com/comics/list/series/"
          <> urlEncode seriesSlug
          <> "/releases"
    tags <- getHttps issuesURI
    Series (parseTitle cfg tags) seriesSlug issuesURI <$> parseReleases tags
@

<<Define the Publisher for Image comics>>=
publisher :: Publisher
publisher =
  Publisher
    { <<Define the scraper for Image comics>>,
      <<Define the collections parser for Image comics>>,
      <<Define the single issues parser for Image comics>>
    }
@ %def Image.publisher

<<lib/ComiCal/Image.hs>>=
{-# LANGUAGE DataKinds #-}

-- |
-- Module      : ComiCal.Image
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
module ComiCal.Image (publisher) where

import ComiCal.App (Publisher (..))
import ComiCal.Types (Scraper (..), Series (..))
import ComiCal.Util (getHttps, parseReleases, urlEncode)
import Control.Arrow (second)
import Control.Monad.Reader (asks)
import qualified Data.Text as T
import Data.Time.Compat (defaultTimeLocale, parseTimeM)
import Text.URI (mkURI)
import Text.XML.Cursor

<<Define the Publisher for Image comics>>
@

\subsection{Handle Marvel comics}

<<Define the Publisher for Marvel comics>>=
publisher :: Publisher
publisher =
  Publisher
    { <<Define the scraper for Marvel comics>>,
      getCollections = fail "Not yet implemented",
      <<Define the single issues parser for Marvel comics>>
    }
@ %def Marvel.publisher

<<Define the single issues parser for Marvel comics>>=
getIssues =
  do
    (seriesSlug, cfg) <- asks (second scraper)
    issuesURI <-
      mkURI $
        "https://www.marvel.com/comics/series/"
          <> seriesSlug
    tags <- getHttps issuesURI
    Series (parseTitle cfg tags) seriesSlug issuesURI <$> parseReleases tags
@

<<Define the scraper for Marvel comics>>=
scraper =
  Scraper
    { partitionReleases = \cursor ->
        cursor
          $// element "div"
          >=> attributeIs "class" "JCMultiRow  JCMultiRow-comic_issue"
          &// element "div"
          >=> attributeIs "class" "row-item-text",
      parseTitle = \cursor ->
        T.strip . head . T.splitOn " | " . head $
          cursor
            $// (element "meta" >=> attributeIs "property" "og:title")
            &| head
            . attribute "content",
      parseReleaseTitle = \cursor ->
        T.strip . head $
          cursor
            $// element "h5"
            &// element "a"
            >=> attributeIs "class" "meta-title"
            &/ content,
      parseReleaseDate = \cursor ->
        parseTimeM True defaultTimeLocale "%B %e, %Y" . T.unpack . last $
          cursor
            $// element "div"
            >=> attributeIs "class" "featured-item-meta"
            &/ element "div"
            &/ content
    }
@

<<lib/ComiCal/Marvel.hs>>=
-- |
-- Module      : ComiCal.Marvel
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
module ComiCal.Marvel (publisher) where

import ComiCal.App (Publisher (..))
import ComiCal.Types (Scraper (..), Series (..))
import ComiCal.Util (getHttps, parseReleases)
import Control.Arrow (second)
import Control.Monad.Reader (asks)
import qualified Data.Text as T
import Data.Time.Compat (defaultTimeLocale, parseTimeM)
import Text.URI (mkURI)
import Text.XML.Cursor

<<Define the Publisher for Marvel comics>>
@

\subsection{The ComiCal.Util module}


<<lib/ComiCal/Util.hs>>=
{-# LANGUAGE TupleSections #-}

-- |
-- Module      : ComiCal.Util
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : experimental
-- Portability : POSIX
module ComiCal.Util
  ( getHttps,
    parseReleases,
    urlEncode,
  )
where

<<ComiCal.Util imports>>

<<Define a helper function to fetch an HTTPS URL>>

<<Define a helper function to parse releases>>

<<Define a helper function to URL encode some Text>>
@

<<ComiCal.Util imports>>=
import ComiCal.App
import ComiCal.Types
import Control.Applicative ((<|>))
import Control.Lens (views, (.~))
import Control.Monad.Catch (Exception, MonadThrow, displayException, throwM)
import Control.Monad.Logger
import Control.Monad.Reader
import qualified Data.List.NonEmpty as NE
import Data.Maybe (catMaybes, listToMaybe)
import Data.Text (Text)
import qualified Data.Text as T
import Data.Text.Encoding as TE
import Network.HTTP.Client (HttpException (..))
import Network.HTTP.Req
import qualified Network.HTTP.Types.URI as HTTP
import Text.HTML.DOM (parseLBS)
import Text.Read (readMaybe)
import Text.URI (URI, mkScheme, mkURI, render, renderStr, unRText)
import Text.URI.Lens (uriPath, uriScheme)
import Text.XML.Cursor
@

<<Define a helper function to fetch an HTTPS URL>>=
getHttps :: (MonadIO m, MonadLogger m, MonadThrow m) => URI -> m Cursor
getHttps theURI =
  do
    $(logDebug) $ "GET " <> render theURI
    url <- maybe badURI (pure . fst) (useHttpsURI theURI)
    res <- runReq defaultHttpConfig $ req GET url NoReqBody lbsResponse mempty
    pure (fromDocument (parseLBS (responseBody res)))
  where
    badURI = throwInvalidUrlM (renderStr theURI) "Unable to construct Network.HTTP.Req.Url"

throwInvalidUrlM :: MonadThrow m => String -> String -> m a
throwInvalidUrlM url reason = throwM . VanillaHttpException $ InvalidUrlException url reason
@ %def getHttps

<<Define a helper function to URL encode some Text>>=
urlEncode :: Text -> Text
urlEncode = TE.decodeUtf8 . HTTP.urlEncode False . TE.encodeUtf8
@ %def urlEncode

In a given [[ComiCalApp]] context, take a \hs{Cursor} and return a
\hs{NonEmpty} list of [[Release]]s by calling the relevant [[partitionReleases]]
function.

<<Define a helper function to parse releases>>=
parseReleases :: Cursor -> ComiCalApp (NE.NonEmpty Release)
parseReleases cursor =
  asks (partitionReleases . scraper . snd) <*> pure cursor
    >>= fmap (NE.fromList . catMaybes)
      . mapM parseRelease

@ %def parseReleases

In a given [[ComiCalApp]] context, try to parse a [[Release]].

<<Define a helper function to parse releases>>=
-- FIXME: This is messy and brittle.
parseRelease :: Cursor -> ComiCalApp (Maybe Release)
parseRelease cursor =
  do
    <<Extract the release URI>>
    <<Try to extract a release number>>
    <<Extract the release title>>
    <<Build a Release or log an error>>

@

First, extract the [[Release]] URI.

<<Extract the release URI>>=
theURI <- (uriScheme .~ mkScheme "https") <$> parseReleaseURI cursor
@

Next, try to extract a release number from the last path of the URI.

<<Try to extract a release number>>=
let lastPath = views uriPath (unRText . last) theURI
(maybeReleaseNumber, finalTags) <- case parseReleaseNumber lastPath of
  Nothing ->
    pure (Nothing, cursor)
  Just (Left n) ->
    pure (Just n, cursor)
  Just (Right n) ->
    (Just n,) <$> getHttps theURI
@

Then, extract the title via [[parseReleaseTitle]].

<<Extract the release title>>=
theTitle <- asks (flip parseReleaseTitle cursor . scraper . snd)
@

Finally, try to pull it all together, logging an error if something went wrong.

<<Build a Release or log an error>>=
maybeRelease <- mkRelease lastPath theTitle maybeReleaseNumber theURI finalTags
maybe
  ($(logError) ("Failed to parse release from " <> render theURI))
  $(logDebugSH)
  maybeRelease
pure maybeRelease
@

<<Define a helper function to parse releases>>=
parseReleaseNumber :: Text -> Maybe (Either Int Int)
parseReleaseNumber lastPath = (Left <$> go "-") <|> (Right <$> go "_")
  where
    go sep = readMaybe (T.unpack (last (T.splitOn sep lastPath)))

@

<<Define a helper function to parse releases>>=
newtype ComiCalException = NoParse Cursor
  deriving (Show)

instance Exception ComiCalException where
  displayException (NoParse tags) = "Failed to parse tags: " <> show tags

parseReleaseURI :: (MonadLogger m, MonadThrow m) => Cursor -> m URI
parseReleaseURI cursor =
  do
    anchorTag <- headM (NoParse cursor) (cursor $// element "a")
    -- FIXME: urlEncode path
    mkURI (head (attribute "href" anchorTag))

@

<<Define a helper function to parse releases>>=
mkRelease :: Text -> Text -> Maybe Int -> URI -> Cursor -> ComiCalApp (Maybe Release)
mkRelease lastPath theTitle maybeReleaseNumber theURI tags =
  asks $
    fmap (Release lastPath theTitle maybeReleaseNumber theURI)
      . (flip parseReleaseDate tags . scraper . snd)

@ %def mkRelease

<<Define a helper function to parse releases>>=
headM :: (MonadThrow m, Exception e) => e -> [a] -> m a
headM e xs =
  do
    case listToMaybe xs of
      Nothing -> throwM e
      Just x -> pure x
@

\subsection{Main}

<<app/Main.hs>>=
-- |
-- Module      : Main
-- Description : The main entrypoint for the ComiCal executable
-- Copyright   : (c) Eric Bailey, 2019-2023
-- License     : MIT
-- Maintainer  : eric@ericb.me
-- Stability   : stable
-- Portability : POSIX
module Main (main) where

<<imports>>

<<main>>

<<options parsing>>
@

Import the library API, qualified to avoid naming conflicts with the options parsing.

<<imports>>=
import qualified ComiCal
@

Import the PullList type from the library.

<<imports>>=
import ComiCal.Types (PullList (..))
@

Import liftIO from Control.Monad.Trans, to run the ComiCal app in the IO monad.

<<imports>>=
import Control.Monad.Trans (liftIO)
@

Import decodeFileStrict from Data.Aeson to parse a pull list from a JSON file.

<<imports>>=
import Data.Aeson (decodeFileStrict)
@

Import Options.Applicative to parse command line options.

<<imports>>=
import Options.Applicative
@


The pull list can be configure with a JSON file, or by flags.

<<options parsing>>=
data AppMode
  = FromFile FilePath
  | FromFlags PullList

@

Declare a parser for the command line options.

<<options parsing>>=
opts :: ParserInfo AppMode
opts =
  info (mkAppMode <**> helper) $
    fullDesc
      <> progDesc "Track the publish dates of comics"
      <> header "ComiCal - comics in your calendar"

@

Handle the app mode, i.e. configure the pull list from a JSON file, or from flags.

<<options parsing>>=
mkAppMode :: Parser AppMode
mkAppMode = FromFile <$> config <|> FromFlags <$> fromFlags
  where
    config =
      strOption
        ( (long "pull-list" <> short 'p')
            <> metavar "PULL_LIST"
            <> help "Pull list file (JSON)"
        )

@

Define the flags for configuring a pull list.

<<options parsing>>=
fromFlags :: Parser PullList
fromFlags =
  PullList
    <$> many
      ( strOption
          ( long "dc-collections"
              <> metavar "SLUG"
              <> help "Track collected editions of DC comics"
          )
      )
    <*> many
      ( strOption
          ( long "dc-issues"
              <> metavar "SLUG"
              <> help "Track single issues of DC comics"
          )
      )
    <*> many
      ( strOption
          ( long "image-collections"
              <> metavar "SLUG"
              <> help "Track collected editions of Image comics"
          )
      )
    <*> many
      ( strOption
          ( long "image-issues"
              <> metavar "SLUG"
              <> help "Track single issues of Image comics"
          )
      )
    <*> many
      ( strOption
          ( long "marvel-collections"
              <> metavar "SLUG"
              <> help "Track collected editions of Marvel comics"
          )
      )
    <*> many
      ( strOption
          ( long "marvel-issues"
              <> metavar "SLUG"
              <> help "Track single issues of Marvel comics"
          )
      )
@

Parse the flags to configure the pull list, then pull it, and output a calendar
in ICS format.

<<main>>=
main :: IO ()
main =
  do
    appMode <- execParser opts
    pullList <- case appMode of
      FromFile fname ->
        liftIO $
          decodeFileStrict fname
            >>= maybe (error ("Failed to parse " <> fname)) pure
      FromFlags pullList -> pure pullList
    let pull = mapM . (fmap ComiCal.mkCalendar .)
    print . foldr1 (<>)
      =<< pull ComiCal.dcIssues (dcIssues pullList)
        <> pull ComiCal.imageCollections (imageCollections pullList)
        <> pull ComiCal.imageIssues (imageIssues pullList)
        <> pull ComiCal.marvelIssues (marvelIssues pullList)
@ %def main

\subsection{Package}

<<package.yaml>>=
name: ComiCal
version: !include "./VERSION"
synopsis: Track the publish dates of your favorite comics
author: Eric Bailey
maintainer: eric@ericb.me
github: yurrriq/ComiCal
extra-source-files:
- CHANGELOG.md
@

Declare dependencies common to the library and executable.
\begin{itemize}
\item \hrefootnote{https://hackage.haskell.org/package/aeson}{aeson}: Fast JSON parsing and encoding
\item \hrefootnote{https://hackage.haskell.org/package/base}{base}: The Standard Haskell Prelude and its support libraries
\item \hrefootnote{https://hackage.haskell.org/package/mtl}{mtl}: Monad classes, using functional dependencies
\end{itemize}

<<package.yaml>>=
dependencies:
- aeson
- base
- mtl
@

Use the \hs{OverloadedStrings} extension by default, so as to avoid worrying
about type annotations for string literals.  Use \hs{TemplateHaskell} for lenses
and logging magic.

<<package.yaml>>=
default-extensions:
- OverloadedStrings
- TemplateHaskell
@

Enable GHC to catch more issues at compile time.

<<package.yaml>>=
ghc-options:
- -Wall
- -Werror
- -Wincomplete-patterns
- -Wincomplete-uni-patterns
@

Configure the library.

<<package.yaml>>=
library:
  source-dirs: lib
  dependencies:
  - bytestring
  - composition-extra
  - exceptions
  - html-conduit
  - http-client
  - http-types
  - lens
  - modern-uri
  - monad-logger
  - req
  - tagsoup
  - text
  - time-compat
  - transformers
  - xml-conduit
@

Configure the executable.

<<package.yaml>>=
executable:
  ghc-options:
  - -O2
  source-dirs: app
  main: Main.hs
  dependencies:
  - ComiCal
  - optparse-applicative
@

<<Setup.hs>>=
import Distribution.Simple

main :: IO ()
main = defaultMain
@
